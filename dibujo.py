from time import sleep
import funcion

def introduccion():
  funcion.limpiar_consola()
  sleep(0.2)
  print('''  ╔═══╗╔╗                       ╔╗    ╔╗      ╔╗                   ╔╗''')
  sleep(0.1)
  print('''  ║╔══╝║║  ╔╗                   ║║    ║║      ║║                   ║║''')
  sleep(0.1)
  print('''  ║╚══╗║║  ╚╝╔╗╔╗╔══╗╔══╗╔══╗ ╔═╝║╔══╗║║  ╔══╗║╚═╗╔══╗╔═╗╔══╗╔══╗╔═╝║╔══╗''')
  sleep(0.1)
  print('''  ║╔══╝║║  ╔╗║║║║║║═╣║╔╗║║╔╗║ ║╔╗║║║═╣║║  ║╔╗║║╔╗║║╔╗║║╔╝║╔═╝║╔╗║║╔╗║║╔╗║''')
  sleep(0.1)
  print('''  ║╚══╗║╚╗ ║║║╚╝║║║═╣║╚╝║║╚╝║ ║╚╝║║║═╣║╚╗ ║╔╗║║║║║║╚╝║║║ ║╚═╗║╔╗║║╚╝║║╚╝║''')
  sleep(0.1)
  print('''  ╚═══╝╚═╝ ║║╚══╝╚══╝╚═╗║╚══╝ ╚══╝╚══╝╚═╝ ╚╝╚╝╚╝╚╝╚══╝╚╝ ╚══╝╚╝╚╝╚══╝╚══╝''')
  sleep(0.1)
  print('''          ╚═╝        ╚══╝''')
  sleep(1)
  funcion.limpiar_consola()

def a_jugar():
  figuras = ['''
   █▀▀▀█        
   █▄▄▄█                                 
   █   █                                           ''',
   '''
   █▀▀▀█    ▀▀█▀  █  █  
   █▄▄▄█      █   █  █  
   █   █    ▄▄█   █▄▄█                             ''',
   '''
   █▀▀▀█    ▀▀█▀  █  █  █▀▀▀▀  █▀▀▀█  █▀▀▀█    
   █▄▄▄█      █   █  █  █  ▄▄  █▄▄▄█  █▄▄▄█    
   █   █    ▄▄█   █▄▄█  █▄▄▄█  █   █  █  ▀▄        ''',
   '''
   █▀▀▀█    ▀▀█▀  █  █  █▀▀▀▀  █▀▀▀█  █▀▀▀█    █  █
   █▄▄▄█      █   █  █  █  ▄▄  █▄▄▄█  █▄▄▄█    █  █
   █   █    ▄▄█   █▄▄█  █▄▄▄█  █   █  █  ▀▄    ▄  ▄''']

  for figura in figuras:
    funcion.limpiar_consola()
    print(figura)
    sleep(0.1)
  sleep(0.5)
  funcion.limpiar_consola()
  
def salvado():
  print('''  
     ▄▄▄▄▄▄▄▄▄▄▄▄
    █ UTEC      █
    █   ______  █     
    █   |    |  █        
    █        |  █     SIIIIII
    █        |  █   O/   
    █        |  █  /|         
    █        |  █  / \  
    █▄▄▄▄▄▄▄▄▄▄▄█
            ''')

def volver():
  print('''
──────▄▌▐▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▌
───▄▄██▌█ ¿Desea volver a la   ▌
▄▄▄▌▐██▌█ sala principal?      ▌ 
███████▌█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▌
▀(@)▀▀▀▀▀▀▀(@)(@)▀▀▀▀▀▀▀▀▀▀▀▀(@)▀

''')


def muerte():
  print('''  
⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠋⠉⠁⠄⠄⠈⠙⠻⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⠟⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠙⢿⣿
⣿⣿⣿⣿⡿⠃⠄⠄⠄⢀⣀⣀⡀⠄⠄⠄⠄⠄⠄⠄⠈⢿
⣿⣿⣿⡟⠄⠄⠄⠄⠐⢻⣿⣿⣿⣷⡄⠄⠄⠄⠄⠄⠄⠈
⣿⣿⣿⠃⠄⠄⠄⢀⠴⠛⠙⣿⣿⡿⣿⣦⠄⠄⠄⠄⠄⠄
⣿⣿⠃⠄⢠⡖⠉⠄⠄⠄⣠⣿⡏⠄⢹⣿⠄⠄⠄⠄⠄⢠
⣿⠃⠄⠄⢸⣧⣤⣤⣤⢾⣿⣿⡇⠄⠈⢻⡆⠄⠄⠄⠄⣾
⠁⠄⠄⠄⠈⠉⠛⢿⡟⠉⠉⣿⣷⣀⠄⠄⣿⡆⠄⠄⢠⣿
⠄⠄⠄⠄⠄⠄⢠⡿⠿⢿⣷⣿⣿⣿⣿⣿⠿⠃⠄⠄⣸⣿
⠄⠄⠄⠄⠄⢀⡞⠄⠄⠄⠈⣿⣿⣿⡟⠁⠄⠄⠄⠄⣿⣿
⠄⠄⠄⠄⠄⢸⠄⠄⠄⠄⢀⣿⣿⡟⠄⠄⠄⠄⠄⢠⣿⣿
⠄⠄⠄⠄⠄⠘⠄⠄⠄⢀⡼⠛⠉⠄⠄⠄⠄⠄⠄⣼⣿⣿
⠄⠄⠄⠄⠄⡇⠄⠄⢀⠎⠄⠄⠄⠄HAPPY ⠙⢿⣿
⠄⠄⠄⠄⢰⠃⠄⢀⠎⠄⠄⠄HALLOWEEN ⠙ '''  )


def proximamente():
  sleep(0.1)
  print('''     ╔═══╗''', end="")
  print('''    ╔═══╗''', end="")
  print('''    ╔═══╗''')
  sleep(0.1)
  print('''     ║╔═╗║''', end="")
  print('''    ║╔═╗║''', end="")
  print('''    ║╔═╗║''')
  sleep(0.1)
  print('''     ╚╝╔╝║''', end="")
  print('''    ╚╝╔╝║''', end="")
  print('''    ╚╝╔╝║''')
  sleep(0.1)
  print('''       ║╔╝''', end="")
  print('''      ║╔╝''', end="")
  print('''      ║╔╝''')
  sleep(0.1)
  print('''       ╔╗ ''', end="")
  print('''      ╔╗ ''', end="")
  print('''      ╔╗ ''')
  sleep(0.1)
  print('''       ╚╝ ''', end="")
  print('''      ╚╝ ''', end="")
  print('''      ╚╝ ''')

def pistola():
  print(''' ⠀⠀⠀⠀⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⣀⣤⣤
⠀⠀⢶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿     Solo una letra a la vez por favor
⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⠠⠾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠛⠛⠛⠛⠛⠛⠋⠉⠀
⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⠏⢠⣿⡀⠀⠀⢹⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣦⣀⣀⣙⣂⣠⠼⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢠⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢸⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢸⣿⣿⣿⣿⣿⣿⣿⡅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠛⠛⠛⠛⠻⠿⠛⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀''' )
  sleep(2)

def despedida():
  print('''

  ▄█▀█▄           ██
▄████████▄     ▄▀█▄▄▄▄
██▀▼▼▼▼▼     ▄▀ █▄▄   
█████▄▲▲▲     ▄▄▀   ▀▄
██████▀▀▀▀   ▀        ▀▀
        VUELVE PRONTOOOO!
''')

def error(opcion):
  if opcion == 1:

    print('''
        __^__                                      __^__
       ( ___ )------------------------------------( ___ )
        | / |                                      | \ |
        | / |  Por favor ingrese una opción valida | \ |
        |___|                                      |___|
       (_____)------------------------------------(_____) ''')
  
  elif opcion == 2:
    print('''                     
    ╔═══════════════════════════════════════════╗ 
    ║  Por favor solo responder "si" o "no" :D  ║ 
    ╚═══════════════════════════════════════════╝ ''')




def imprimir_ahorcado(errores):
  """
  Esta funcion imprime el ahorcado deacuerdo a los errores cometidos con el limite de 6 errores
  """
  if errores == 0:
    print(''' 
     ▄▄▄▄▄▄▄▄▄▄▄▄
    █ UTEC      █
    █   ______  █
    █   |    |  █
    █        |  █
    █        |  █
    █        |  █
    █        |  █
    █▄▄▄▄▄▄▄▄▄▄▄█''')
  elif errores == 1:
    print('''
     ▄▄▄▄▄▄▄▄▄▄▄▄
    █ UTEC      █
    █   ______  █
    █   |    |  █
    █   O    |  █
    █        |  █
    █        |  █
    █        |  █
    █▄▄▄▄▄▄▄▄▄▄▄█''')
  elif errores == 2:
    print('''
     ▄▄▄▄▄▄▄▄▄▄▄▄
    █ UTEC      █
    █   ______  █
    █   |    |  █
    █   O    |  █
    █   |    |  █
    █        |  █
    █        |  █
    █▄▄▄▄▄▄▄▄▄▄▄█''')
  elif errores == 3:
    print('''
     ▄▄▄▄▄▄▄▄▄▄▄▄
    █ UTEC      █
    █   ______  █
    █   |    |  █
    █   O    |  █
    █  /|    |  █
    █        |  █
    █        |  █
    █▄▄▄▄▄▄▄▄▄▄▄█''')
  elif errores == 4:
    print('''
     ▄▄▄▄▄▄▄▄▄▄▄▄
    █ UTEC      █
    █   ______  █
    █   |    |  █
    █   O    |  █
    █  /|\   |  █
    █        |  █
    █        |  █
    █▄▄▄▄▄▄▄▄▄▄▄█''')
  elif errores == 5:
    print('''
     ▄▄▄▄▄▄▄▄▄▄▄▄
    █ UTEC      █
    █   ______  █
    █   |    |  █
    █   O    |  █
    █  /|\   |  █
    █  /     |  █
    █        |  █
    █▄▄▄▄▄▄▄▄▄▄▄█''')
  elif errores == 6:
    print('''
     ▄▄▄▄▄▄▄▄▄▄▄▄
    █ UTEC      █
    █   ______  █
    █   |    |  █
    █   O    |  █
    █  /|\   |  █
    █  / \   |  █
    █        |  █
    █▄▄▄▄▄▄▄▄▄▄▄█''')